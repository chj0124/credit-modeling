#+TITLE: 向量化索引

* 可索引对象
python 中的很多原生的对象都是支持用各种方式索引其中的一个或多个元素的，比如列表的索引：

#+begin_src python :results output
x = [1, 3, 5, 7]

print(x[0])  # 第一个元素
print(x[0:2])  # 指定范围
print(x[-1])  # 最后一个元素
print(x[-2:])  # 最后两个元素
#+end_src

#+RESULTS:
: 1
: [1, 3]
: 7
: [5, 7]

另外一种比较有代表的索引是字典对象的 key 索引：

#+begin_src python :results output
trump = {
    "gender": "female",
    "age": 99
}

print(trump['age'])
#+end_src

#+RESULTS:
: 99

比起这些原生的 python 对象，numpy ndarray 在使用的过程中需要更强的索引功能来完成任务，所以 numpy 中定义了一个隐式的 index，使 numpy ndarray 可以用向量化方式来索引，而 pandas 在 numpy 的基础上定义了更强大的 index，不仅支持向量化索引，还支持用 key 值索引对应的行列。对于经常跟 numpy 和 pandas 打交道的人来说，向量化索引的技巧必须熟练掌握。

* [#A] DataFrame 的条件筛选与向量化技巧
** 按列值筛选
只根据某一列的值来筛选是很简单的，只需要写成以下形式：
#+begin_src python
df1[df1['Age'] > 30]  # 筛选出 df1 中 Age 这一列大于 30 的所有行

df1[df1['City'] == "New York"]  # 筛选出 df1 中 City 这一列等于 New York 的所有行
#+end_src

** 多条件筛选——布尔序列运算
如果要在一条语句里同时用两个条件来筛选，就必须涉及到向量化的思想。和 python 原生的对象不同，pandas 为 DataFrame 对象提供了向量化索引的方法。在

: df1[df1['Age'] > 30]

这条语句中的 =df1['Age']= 是一个 Series，而整个索引条件 =df1['Age'] > 30= 则是一个完整的比较运算语句，它产生的结果是一个布尔序列 s，将这个布尔序列作为 df1 的索引时，就相当于是在索引 s 为 True 的所有行。

那么如果要按照多个条件筛选呢？只需要在 df1 的索引里写上多个条件产生多个布尔序列，然后对这几个布尔序列进行逻辑运算来形成一个新的布尔序列即可：

: df1[(df_train["Age"] > 30) & (df_train["Sex"] == "female")]

*布尔型 Series 的逻辑运算符已经被重载过，直接使用 & | ~ 来进行与或非运算即可，无需使用函数式方法*

** 筛选任意一种 Index 或 Series

不要忽略，除了 DataFrame 和 Series 本身，df.columns 和 df.index 也是可以用向量化方式来索引的。

比如，要筛选出符合条件的 column name，可以先对整个 DataFrame 做按列进行的类方法或者函数式计算，然后直接在计算结果上生成布尔数组来对 df.columns 进行索引。举一个简单的例子，用向量化方法筛选出 df 中所有包含空值的列名：

: df.columns[(1 * pd.isnull(df)).sum() > 0]
