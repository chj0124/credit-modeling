#+TITLE: Pandas 作业
#+OPTIONS: \n:t

* 任务列表
** 读取
1. 将 train.csv 读取为一个 DataFrame，命名为 df_train
2. 同样读取 test.csv 与 gender_submission.csv，命名为 df_test 与 df_survive
** 索引
1. 筛选出 df_train 中 (年龄大于 30 岁的女性) 或 (姓名为空的人)
2. 筛选出 df_train 中所有包含空值且数据类型为数值型的列的列名
3. 筛选出 df_train 中方差最大的数值列的列名
** 拼接
1. 使用 =pd.merge()= 函数，将 df_test 与 df_suvive 根据 PassengerId 进行匹配连接，形成 df_test2
2. 使用 =pd.concat()= 函数，将 df_train 与 df_test2 拼接在一起
** 写入 Excel
将 df_train，df_test，df_survive 的内容写入一个 excel 文件的三个 sheet，该 Excel 文件命名为 titanic.xlsx

* 作业展示
** lh
#+begin_src python :results output
import pandas as pd
import numpy as np

# Create df with np
x=np.random.rand(3,3)
col_name=["x1","x2","x3"]
pd.DataFrame(x,columns=col_name)

# read
data1=pd.read_csv(r"./learn_data/lesson3.csv")
data1_col=data1.columns
group1=data1.shape#矩阵数据的行、列数
a1=data1.iloc[:,0:1]
a2=data1.iloc[:,1:2]
a3=data1.loc[:,["Age"]]#选取年龄列
b1=pd.isnull(data1["Age"])#年龄为空值的布尔数组
a4=data1.loc[:,["Sex"]]#选取性别列
b2=pd.isnull(data1["Sex"])#性别为空值的布尔数组

#条件
data2=data1[data1["Sex"]=="female"]#条件选取性别为女的矩阵数据
group2=data2.shape
data3=data2[data2["Survived"]==1]#条件选取性别为女且生存的矩阵数据
group3=data3.shape

#多条件
data4=data1[(data1["Age"]>40)&(data1["Sex"]=="female")]#条件选取年龄大于40且性别为女的矩阵数据
group4=data4.shape

#姓名为空
data5=1*pd.isnull(data1["Name"]).sum()#计算name出现空值的个数
data6=(1*pd.isnull(data1)).sum()#输出每列出现空值的次数
#+end_src
** zyw
#+begin_src python
import pandas as pd
import numpy as np

# 读取
df_train = pd.read_csv(r"./raw_data/train.csv")

df_test = pd.read_csv(r"./raw_data/test.csv")

df_survive = pd.read_csv(r"./raw_data/gender_submission.csv")

# 索引
df_train[((df_train["Age"]>30)&(df_train["Sex"]=="female"))|pd.isnull(df_train["Name"])]

df_train.columns[((1*pd.isnull(df_train)).sum()>0)&(1*((df_train.dtypes == "int64")|(df_train.dtypes == "float64"))>0)]

print(np.argmax(np.var(df_train),axis = 0))

# 拼接
df_test2 = pd.merge(df_survive, df_test, on = 'PassengerId')

df_all = pd.concat([df_train, df_test2], axis = 0)

# 写入Excel
writer = pd.ExcelWriter(r"./raw_data/titanic.xlsx")
df_train.to_excel(writer,'Sheet1')
df_test.to_excel(writer,'Sheet2')
df_survive.to_excel(writer,'Sheet3')
writer.save()
#+end_src
** cfq
#+begin_src python
import pandas as pd
import numpy as np
x=np.random.rand(3,3)  #生成3*3随即矩阵
col_name=["x1","x2","x3"]  #创建列名
pd.DataFrame(x,columns=col_name)  #creat df with numpy

import os
os.getcwd()
df1=pd.read_csv(r"./raw_data/lesson3.csv")
df1.columns

##索引
df1['Age']  #列名为Age
df1["Age"] ####疑问：单引号与双引号使用方式有啥区别？？？？试过两者的运行结果一致,是否表示无区别
df1.iloc[:,:]  #所有行所有列
df1.iloc[3:7,0:4]  #3-6行，1-3列
df1.loc[:,"Name":"Age"]  #Name:Age的连续列
df1.loc[:,["Age","Name"]]  #列名为Age和Name

##加条件索引
df1[df1["Age"]>30]  #方括号[]代表索引,去掉[]将产生布尔向量

#例如：
df1["Age"]>30  #生产布尔向量True/False

##与&，或|，非！
df1[(df1["Age"]>30)&(df1["Sex"]=="female")]  #注意区分大小写
pd.isnull(df1["Age"])  ####Age为空值的布尔向量


(1*pd.isnull(df1["Age"])).sum()  #得出多少个空值
df1.columns[(1*pd.isnull(df1)).sum()>0] #索引出哪几列有空值
#+end_src
** dxp
#+begin_src python
import pandas as pd
import numpy as np

# 读取
df_train = pd.read_csv(r"C:/Users/Administrator/raw_data/train.csv")
df_test = pd.read_csv(r"C:/Users/Administrator/raw_data/test.csv")
df_survive = pd.read_csv(r"C:/Users/Administrator/raw_data/gender_submission.csv")

# 索引
df_train[((df_train["Age"]>30)&(df_train["Sex"] == "Female"))|pd.isnull(df_train["Age"])]  #年龄大于30的女性或姓名为空的人
df_train.columns[((1*pd.isnull(df_train)).sum()>0)&(1*((df_train.dtypes == "int64")|(df_train.dtypes == "float64"))>0)] #所有包含空值且数据类型为数值型的列的列名
print(np.argmax(np.var(df_train),axis=0))  #方差最大的数值列的列名

#拼接
df_test2=pd.merge(df_test,df_survive,on = 'PassengerId') #将 df_test 与 df_suvive 根据 PassengerId 进行匹配连接，形成 df_test2
df_test3=pd.concat([df_train,df_test2],axis = 0)   #将 df_train 与 df_test2 拼接在一起

#写入EXCEL
excel = pd.ExcelWriter(r"C:/Users/Administrator/raw_data/titanic.xlsx")
df_train.to_excel(excel,'Sheet1')
df_test.to_excel(excel,'Sheet2')
df_survive.to_excel(excel,'Sheet3')
excel.save()
#+end_src
** hyq
#+begin_quote
把培训现场的内容自己练习了一遍
#+end_quote
** glp
#+begin_src python
import numpy as np
import pandas as pd

 
#定义路径IO
IO = 'lessonother.xlsx'
#读取excel文件
df_lessonother = pd.read_excel(io=IO)
#此处由于sheetname默认是0，所以返回第一个表
print(df_lessonother)

#读取csv
df_lesson=pd.read_csv(r"C:\Administrator\Desktop\lesson3.csv")
print(df_lesson)

# 创建列表
x=np.random.rand(4,4)
col_name=["l1","l2","l3","l4"]
print(pd.DataFrame(x,columns=col_name))

#创建字典
x2={'name':["Mike","Bob","Alice"],"age":[34,35,45]}
print(pd.DataFrame(x2))

#索引
df_lesson.columns
df_lesson['Age']

print(df_lesson.iloc[:,[0,3]])

#求年龄不为空的
1*pd.notnull(df_lesson['Age'])

#有空值的列
df_lesson.columns[(1*pd.isnull(df_lesson)).sum()>0]


#&与的关系
df_lesson[(df_lesson["Age"]>0)&(df_lesson["Sex"]=="female")] 
#+end_src
** lb
#+begin_src python
import pandas as pd
import numpy as np
#读取
df_train = pd.read_csv(r'E:\model_study\lession3\train.csv')
df_test = pd.read_csv(r'E:\model_study\lession3\test.csv')
df_survive = pd.read_csv(r'E:\model_study\lession3\gender_submission.csv')

# 筛选出 df_train 中 (年龄大于 30 岁的女性) 或 (姓名为空的人)

df1 = df_train[((df_train['Sex'] == 'female') & (df_train['Age'] > 30)) | (df_train['Name'].isnull().values == True)]
df1 = df1.reset_index()
print(df1)
# 筛选出 df_train 中所有包含空值且数据类型为数值型的列的列名

df2 = df_train.columns[(1 * pd.isnull(df_train).sum() > 0) & (df_train.dtypes != 'object')]
print(df2)
# 筛选出 df_train 中方差最大的数值列的列名
df3 = df_train.var()
df4 = df3.idxmax()
print(df4)
# 使用 pd.merge() 函数，将 df_test 与 df_suvive 根据 PassengerId 进行匹配连接，形成 df_test2
df_test
df_survive
df5 = pd.merge(df_test,df_survive,how='left', on='PassengerId')
print(df5)
# 使用 pd.concat() 函数，将 df_train 与 df_test2 拼接在一起
df6 = pd.concat([df_train,df5],sort=True)
df6.shape
print(df6)
# 将 df_train，df_test，df_survive 的内容写入一个 excel 文件的三个 sheet，该 Excel 文件命名为 titanic.xlsx
excel_filepath = r'E:\model_study\lession3\titanic.xlsx'
write = pd.ExcelWriter(excel_filepath)
df_train.to_excel(write,sheet_name="sheet1",index=False)
df_test.to_excel(write,sheet_name="sheet2",index=False)
df_survive.to_excel(write,sheet_name="sheet3",index=False)
write.save()
#+end_src
** xlj
#+begin_src python
# -*- coding: utf-8 -*-
"""
Created on Mon Feb 18 16:43:48 2019

@author: xulingjie

lesson 3 runsheng's assignment
"""

import pandas as pd

# 读取
df_train = pd.read_csv('E://部门培训 python//lesson 3//train.csv', engine = 'python')
df_train = df_train.rename(columns = {'锘縋assengerId':'PassengerId'})

df_test = pd.read_csv('E://部门培训 python//lesson 3//test.csv', engine = 'python')
df_test = df_test.rename(columns = {'锘縋assengerId':'PassengerId'})

df_survive = pd.read_csv('E://部门培训 python//lesson 3//gender_submission.csv', engine = 'python')
df_survive = df_survive.rename(columns = {'锘縋assengerId':'PassengerId'})

# 索引
s11 = df_train['Age'] > 30
s12 = df_train['Sex'] == 'female'
s13 = pd.isnull(df_train['Name'])
df_sele1 = df_train[(s11 & s12) | s13]

ColNo = len(df_train.columns)
for i in list(range(0, ColNo)):
    print(pd.isnull(df_train.iloc[:, i]).value_counts())
    print(df_train.iloc[:, i].dtypes)
    print('----------------------------------------')

#结果是Age
    
df_sele3 = df_train.describe()
#Fare

# 拼接
df_test2 = pd.merge(df_test, df_survive, how = 'outer' ,on= 'PassengerId')

df_nothing = pd.concat([df_train, df_test2])

# 写入
writer = pd.ExcelWriter('E:\\部门培训 python\\lesson 3\\titanic.xlsx', engine = 'openpyxl')

df_train.to_excel(excel_writer = writer, sheet_name = 'df_train')
df_test.to_excel(excel_writer = writer, sheet_name = 'df_test')
df_survive.to_excel(excel_writer = writer, sheet_name = 'df_survive')

writer.save()
writer.close()
#+end_src
** wt
#+begin_src python
# -*- coding: utf-8 -*-
"""
Created on Mon Feb 18 10:11:07 2019

@author: a4496
"""
import numpy as np
import pandas as pd
import os
import openpyxl
#获取当前工作路径
os.getcwd()
#设置课程三的工作路径
os.chdir('C:\\wuting\\study\\python\\翱翔者计划\\lesson3\\credit-modeling-master\\lesson3-重要的Python包讲解\\Pandas\\raw_data')
#读取作业的数据文件
df_train = pd.read_csv('train.csv')
df_test = pd.read_csv('test.csv')
df_survive = pd.read_csv('gender_submission.csv')
#数据筛选
df_train_choice1 = df_train[((df_train["Age"]>30)&(df_train["Sex"]=='female'))|(pd.isnull(df_train['Name']))]
df_train_choice2 = df_train.columns[((1*pd.isnull(df_train).sum())>0)&(df_train.dtypes == 'float')]
print(df_train_choice2)
df_train_choice3 = np.var(df_train)
print(df_train_choice3)
df_train_choice4 = df_train_choice3.idxmax()
print(df_train_choice4)
#数据拼接
df_test2 = pd.merge(df_test,df_survive,how='left', on='PassengerId')
df_test3 = pd.concat([df_train,df_test2])
#数据导出
excel = pd.ExcelWriter("c:/wuting/titanic.xlsx")
df_train.to_excel(excel,'Sheet1')
df_test.to_excel(excel,'Sheet2')
df_survive.to_excel(excel,'Sheet3')
excel.save()
#+end_src
** wjk
#+begin_src python
import pandas as pd
import numpy as np#读取EXCEL
df_train = pd.read_csv('F:\\py\\train.csv')
df_survive = pd.read_csv('F:\\py\\gender_submission.csv')
df_test = pd.read_csv('F:\\py\\test.csv')

print(df_train.columns)
print(df_train["Sex"])
df_train.describe()

# 筛选年龄30岁以上的筛选出 df_train 中 (年龄大于 30 岁的女性) 或 (姓名为空的人)
((df_train["Age"] > 30) & (df_train["Sex"] == "female"))|(pd.isnull(df_train["Name"]))
print(df_train[((df_train["Age"] > 30) & (df_train["Sex"] == "female"))|(pd.isnull(df_train["Name"]))])

# 筛选出 df_train 中所有包含空值且数据类型为数值型的列的列名
print(df_train.columns[pd.isnull(df_train).sum()>0])

# 筛选出 df_train 中方差最大的数值列的列名
print(df_train.describe().columns[df_train.describe().loc["std",:] == df_train.describe().loc["std",:].max()])

print(np.argmax(np.var(df_train),axis = 0)) #np.var 求方差  np.argmax 求最大值索引

print(df_train.var().argmax())

# 使用 pd.merge() 函数，将 df_test 与 df_suvive 根据 PassengerId 进行匹配连接，形成 df_test2
df_test2 = pd.merge(df_test,df_survive, on = "PassengerId")
print(df_test2)

#使用 pd.concat() 函数，将 df_train 与 df_test2 拼接在一起
df_test3 = pd.concat([df_train,df_test2])
print(df_test3)

#将 df_train，df_test，df_survive 的内容写入一个 excel 文件的三个 sheet，该 Excel 文件命名为 titanic.xlsx
writer = pd.ExcelWriter('F:\\py\\titanic.xlsx')
df_train.to_excel(writer,'Sheet1')
df_test.to_excel(writer,'Sheet2')
df_survive.to_excel(writer,'Sheet3')
writer.save()
#+end_src
** xy
#+begin_src python
import pandas as pd 
import numpy as np
from sklearn.preprocessing import Imputer
df = pd.read_excel ( r"D:/lesson.xlsx" )
df['relationship'] = df['SibSp'] + df['Parch']
df.isnull().sum()
df.dropna(subset = ['Sex'])
df.dropna(subset = ['relationship'])
df1 = df['Age']
imp1 = Imputer(missing_values='NaN',strategy='mean',axis=1)
df
#+end_src
